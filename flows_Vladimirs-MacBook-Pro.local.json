[{"id":"12d0fe0b.cc7a42","type":"tab","label":"MirrorProject UDP","disabled":false,"info":""},{"id":"dec0aae0.212ac8","type":"ui_tab","z":"","name":"Mirror Control","icon":"dashboard"},{"id":"93fcf982.69e248","type":"ui_group","z":"","name":"Group 1","tab":"dec0aae0.212ac8","disp":true,"width":"7","collapse":false},{"id":"3e359b9b.2d3df4","type":"ui_base","theme":{"name":"theme-light","lightTheme":{"default":"#0094CE","baseColor":"#ce2d0e","baseFont":"-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif","edited":true,"reset":false},"darkTheme":{"default":"#097479","baseColor":"#097479","baseFont":"-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif","edited":true,"reset":false},"customTheme":{"name":"Untitled Theme 1","default":"#4B7930","baseColor":"#4B7930","baseFont":"-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif"},"themeState":{"base-color":{"default":"#0094CE","value":"#0094CE","edited":true},"page-titlebar-backgroundColor":{"value":"#ce2d0e","edited":false},"page-backgroundColor":{"value":"#fafafa","edited":false},"page-sidebar-backgroundColor":{"value":"#000000","edited":false},"group-textColor":{"value":"#f15537","edited":false},"group-borderColor":{"value":"#ffffff","edited":false},"group-backgroundColor":{"value":"#ffffff","edited":false},"widget-textColor":{"value":"#111111","edited":false},"widget-backgroundColor":{"value":"#ce2d0e","edited":false},"widget-borderColor":{"value":"#ffffff","edited":false},"base-font":{"value":"-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif"}}},"site":{"name":"Node-RED Dashboard","hideToolbar":"true","allowSwipe":"false","dateFormat":"DD/MM/YYYY","sizes":{"sx":158,"sy":48,"gx":6,"gy":6,"cx":6,"cy":6,"px":0,"py":0}}},{"id":"6b0aed6b.f7a354","type":"ui_group","z":"","name":"Group 2","tab":"dec0aae0.212ac8","order":2,"disp":true,"width":"7","collapse":false},{"id":"cfa4c2de.5a7f6","type":"ui_group","z":"","name":"Group 3","tab":"dec0aae0.212ac8","disp":true,"width":"7","collapse":false},{"id":"c1d77434.e6a5e8","type":"ui_group","z":"","name":"FLAT AND CHURCH","tab":"dec0aae0.212ac8","disp":true,"width":"7","collapse":false},{"id":"ca242bf6.ea8c38","type":"udp in","z":"12d0fe0b.cc7a42","name":"","iface":"","port":"3001","ipv":"udp4","multicast":"false","group":"192.168.1.3","datatype":"buffer","x":80,"y":360,"wires":[["83597bb2.c99498"]]},{"id":"83597bb2.c99498","type":"osc","z":"12d0fe0b.cc7a42","name":"","path":"","metadata":false,"x":110,"y":280,"wires":[["d59f08f6.728408"]]},{"id":"4d4c62f7.44e0dc","type":"function","z":"12d0fe0b.cc7a42","name":"Beacon Control","func":"const beaconTracks = [];\nbeaconTracks.push({beacon:'mint_4', track:'5.mp3'});\nbeaconTracks.push({beacon:'mint_2', track:'5.mp3'});\nbeaconTracks.push({beacon:'mint_3', track:'7.mp3'});\nbeaconTracks.push({beacon:'ice_1', track:'6.mp3'});\nbeaconTracks.push({beacon:'ice_2', track:'6.mp3'});\nbeaconTracks.push({beacon:'ice_3', track:'6.mp3'});\nbeaconTracks.push({beacon:'ice_4', track:'6.mp3'});\nbeaconTracks.push({beacon:'blueberry_1', track:'6.mp3'});\nbeaconTracks.push({beacon:'blueberry_2', track:'7.mp3'});\nbeaconTracks.push({beacon:'blueberry_3', track:'7.mp3'});\n\n\n\nconst trackRules = new Map();\ntrackRules.set('5.mp3', '4.mp3');\ntrackRules.set('6.mp3', '5.mp3');\ntrackRules.set('7.mp3', '6.mp3');\n\n\nconst newBeacon = msg.payload.location;\nconst ip = msg.payload.ip;\n\nlet beaconTrack = beaconTracks.find(bt => {\n    if (newBeacon === bt.beacon) {\n        return true;\n    }\n});\n\nlet shouldPlayTrack = beaconTrack ? beaconTrack.track : 'NONE';\nconst curTrack = msg.payload.curTrack;\n\nconst cTrack = trackRules.get(shouldPlayTrack);\nconsole.log('SHOULD ' + shouldPlayTrack + ' CUR ' + curTrack);\nconsole.log ('cTrack' + cTrack);\n\nif (curTrack == cTrack || curTrack == 'NONE') {\n    return { payload: shouldPlayTrack, 'ip': ip };\n}\n// if (shouldPlayTrack === '5.mp3') {\n//     if (curTrack === '4.mp3' || curTrack === 'NONE'){\n//         return { payload: shouldPlayTrack, 'ip': ip };\n//     }\n// }\n\n\n\n\n//return { payload: shouldPlayTrack, 'ip': ip };\n","outputs":"1","noerr":0,"x":480,"y":60,"wires":[["5f260092.e4363"]]},{"id":"5f260092.e4363","type":"osc","z":"12d0fe0b.cc7a42","name":"oscPlay","path":"/cloudaudio/1","metadata":false,"x":900,"y":60,"wires":[["1ff85776.8c4229"]]},{"id":"1ff85776.8c4229","type":"udp out","z":"12d0fe0b.cc7a42","name":"","addr":"","iface":"","port":"3000","ipv":"udp4","outport":"","base64":false,"multicast":"false","x":1120,"y":120,"wires":[]},{"id":"efb6ab46.0dc268","type":"switch","z":"12d0fe0b.cc7a42","name":"beacon/state","property":"topic","propertyType":"msg","rules":[{"t":"eq","v":"/location/1","vt":"str"},{"t":"eq","v":"/devicestate/1","vt":"str"}],"checkall":"true","outputs":2,"x":250,"y":100,"wires":[["4d4c62f7.44e0dc"],["2dd477ad.54fe18"]]},{"id":"2dd477ad.54fe18","type":"ui_template","z":"12d0fe0b.cc7a42","group":"93fcf982.69e248","name":"Manual Control ","order":1,"width":"7","height":"12","format":"<style>\ntable, td, th, tr  {\n  border: 0px solid grey;\n  border-collapse: collapse;\n  padding: 1px;\n  font-size: 11px;\n  text-align: left;\n}\n</style>\n \n<table>\n<tbody>\n    <tr>\n    <td colspan=\"2\">\n        <center>\n            <md-button class=\"md-raised\" ng-click=\"send({payload:quitAll()})\" style=\"background-color:red; z-index:1; padding:0px;width:150px\">\n                KillALL\n            </md-button>\n        </center>\n    </td>\n        <td colspan=\"2\">\n            <center>\n                <md-button ng-click=\"send({payload:stopAll()})\" style=\"background-color:orange; z-index:1; padding:0px;width:150px\">\n                    StopALL\n                </md-button>\n            </center>\n    </td>\n    <td colspan=\"2\"></td>\n<td colspan=\"6\">\n    <center>\n        <md-button class=\"md-raised\" ng-click=\"send({payload:playAll(0)})\" style=\"background-color:green; z-index:1; padding:0px;width:300px\">\n                PlayALL\n        </md-button>\n    </center>\n</td>\n \n</tr>\n    <tr>\n         <th>#</th><th>IP</th><th>UpTime</th><th>State</th><th>Battery</th><th>Beacon</th><th>Track</th><th>Volume</th><th>Progress</th><th>Should</th><th>Play</th><th>Stop</th>\n    </tr>\n    <tr ng-repeat=\"x in table track by $index\">\n        <td>{{$index +1}}</td>\n        <td style=\"{{x.ipStyle}}\">{{x.ip}}</td>\n        <td>{{x.deltaSecs}} s</td>\n        <td style=\"{{x.stateStyle}}\">{{x.state}}</td>\n        <td>{{x.battery}}</td>\n        <td>{{x.location}}</td>\n        <td>{{x.track}}</td>\n        <td>{{x.volume}}</td>\n        <td><progress value=\"{{x.progress}}\" max=\"100\"></progress>{{x.trackPlayed}}</td>\n        <td>\n          <select ng-model=\"x.tracks.value\" ng-options=\"y for y in x.tracks.values\" ng-click=\"setTrack(x, y)\">\n          </select>\n        </td>\n        <td>\n          <md-button class=\"md-raised\" ng-click=\"send({payload:play($index)})\" style=\"background-color:green; z-index:1; padding:0px;width:100px\">\n            play\n          </md-button>\n        </td>\n        <td>\n          <md-button ng-click=\"send({payload:stop($index)})\" style=\"background-color:orange; z-index:1; padding:0px;width:100px\">\n            stop\n          </md-button>\n        </td>\n        <td>\n          <md-button ng-click=\"send({payload:quit($index)})\" style=\"background-color:red; z-index:1; padding:0px;width:100px\">\n            kill\n          </md-button>\n        </td>\n    </tr>\n    <tr><td>Volume All</td>\n        <td colspan=\"9\">\n            <md-slider-container>\n                <md-slider md-discrete ng-model=\"vol\" ng-change=\"send({payload:setVolume(vol)})\" step=\"2\" min=\"0\" max=\"100\" class=\"slider-green\">\n                </md-slider>\n                <md-input-container>\n                    <input flex type=\"number\" ng-model=\"vol\" step=\"2\" min=\"0\" max=\"100\" aria-label=\"red\" aria-controls=\"red-slider\" ng-change=\"send({payload:setVolume(vol)})\">\n                </md-input-container>\n            </md-slider-container>\n        </td>\n    </tr>\n</tbody> \n</table>\n \n<script>\n    let map = new Map();\n \n    allTracks = {\n        \"type\": \"select\",\n        \"value\": \"\",\n        \"values\": [\"1.mp3\", \"2.mp3\", \"3.mp3\", \"4.mp3\", \"5.mp3\", \"6.mp3\", \"7.mp3\", \"8.mp3\", \"9.mp3\", \"10.mp3\", \"11.mp3\"]\n    };\n    (function(scope) {\n        'use strict';\n        scope.vol = 85;\n          \n        scope.setTrack = function (row, track) {\n            const index = row.tracks.values.indexOf(track);\n            if (index === -1) return;\n            const newValue = row.tracks.values[index];\n            row.tracks.value = newValue;\n        };\n        scope.$watch('msg', function (newValue, oldValue, scope) {\n \n            const msg = scope.msg;\n \n            if (msg && msg.payload && msg.ip) {\n                const prevObj = map.get(msg.ip);\n                const nowSecs = Math.round(Date.now() / 1000);\n                let startSecs = nowSecs;\n                let prevDelta = 0;\n                if (prevObj) {\n                    startSecs = parseInt(prevObj['startSecs']);\n                    prevDelta = parseInt(prevObj['deltaSecs']);\n                }\n \n                const delta = nowSecs - startSecs;\n                \n                const minPlayed = Math.floor(msg.payload.trackPlayed / 60);\n                const secPlayed = msg.payload.trackPlayed - minPlayed * 60;\n                const timePlayed = minPlayed + \"m \" + secPlayed + \"s\";\n                const vol = Math.floor(parseFloat(msg.payload.volume) * 100);\n                \n                let stateStyle = 'background-color:white';\n                if ('background' == msg.payload.state) {\n                    stateStyle = 'background-color:yellow';\n                } else if ('shutdown' == msg.payload.state) {\n                    stateStyle = 'background-color:red';\n                }\n \n                map.set(msg.ip, {\n                    'ip': msg.ip,\n                    'nowSecs': nowSecs,\n                    'startSecs': startSecs,\n                    'deltaSecs': delta,\n                    'state': msg.payload.state,\n                    'stateStyle': stateStyle,\n                    'track': msg.payload.curTrack,\n                    'location': msg.payload.location,\n                    'progress': msg.payload.trackProgress,\n                    'trackPlayed': timePlayed,\n                    'volume': vol +'%',\n                    'battery': msg.payload.batLeft + '% ' + msg.payload.batState,\n                    'tracks': allTracks,\n                    'ipStyle': 'background-color:white'\n                });\n                \n                map.forEach( (item, key, mapObj) => {\n                    if ((nowSecs - parseInt(item.nowSecs)) > 10) {\n                        item.ipStyle = 'background-color:red';\n                        mapObj.set(key, item);\n                    }\n                });\n                \n                map = new Map([...map.entries()].sort((a,b) => {\n                    if (typeof a[0] == \"undefined\") {\n                        return -1;\n                    }\n                    if (typeof b[0] == \"undefined\") {\n                        return 1;\n                    }\n                    let aa = a[0].split(\".\");\n                    let bb = b[0].split(\".\");\n                    \n                    let resulta = aa[0]*0x1000000 + aa[1]*0x10000 + aa[2]*0x100 + aa[3]*1;\n                    let resultb = bb[0]*0x1000000 + bb[1]*0x10000 + bb[2]*0x100 + bb[3]*1;\n                    \n                    return resulta-resultb;\n                }));\n                \n                scope.table = Array.from(map.values());\n            }\n            \n            scope.play = function(idx) {\n                let ips = Array.from(map.keys());\n                let ip = ips[idx];\n                let row = map.get(ip);\n                if (row.tracks.value && ip) {\n                    console.log('play track='+ row.tracks.value + ' ip=' + ip);\n                    return {'track' : row.tracks.value, 'ip' : ip};\n                }\n            }\n            \n            scope.playAll = function(idx) {\n                let ips = Array.from(map.keys());\n                let ip = ips[idx];\n                let row = map.get(ip);\n                let result = [];\n                if (row.tracks.value && ip) {\n                    ips.forEach(ip => {\n                         if (ip) {\n                             console.log('all track='+ row.tracks.value + ' ip=' + ip);\n                             result.push({'track' : row.tracks.value, 'ip' : ip});\n                         }\n                     });\n                     if (result.length > 0) {\n                         return result;\n                     }\n                }\n            };\n            \n            scope.stop = function(idx) {\n                let ips = Array.from(map.keys());\n                let ip = ips[idx];\n                console.log('stop ip=' + ip);\n                return{'stop' : true, 'ip' : ip};\n            }\n            \n            scope.stopAll = function() {\n                let ips = Array.from(map.keys());\n                let result = [];\n                ips.forEach(ip => {\n                     if (ip) {\n                         result.push({'stop' : true, 'ip' : ip});\n                     }\n                 });\n                 if (result.length > 0) {\n                     return result;\n                 }\n            }\n            \n            scope.quit = function(idx) {\n                let ips = Array.from(map.keys());\n                let ip = ips[idx];\n                console.log('stop ip=' + ip);\n                return{'quit' : true, 'ip' : ip};\n            }\n            \n            scope.quitAll = function() {\n                let ips = Array.from(map.keys());\n                let result = [];\n                ips.forEach(ip => {\n                     if (ip) {\n                         result.push({'quit' : true, 'ip' : ip});\n                     }\n                 });\n                 if (result.length > 0) {\n                     return result;\n                 }\n            }\n            \n            scope.setVolume = function(vol) {\n                let ips = Array.from(map.keys());\n                let result = [];\n                ips.forEach(ip => {\n                     if (ip) {\n                         result.push({'volume' : parseInt(vol)/100.0, 'ip' : ip});\n                     }\n                 });\n                 if (result.length > 0) {\n                     return result;\n                 }\n            }\n        });\n    })(scope);    \n</script>","storeOutMessages":true,"fwdInMessages":false,"templateScope":"local","x":460,"y":160,"wires":[["abbbe52a.49c708"]]},{"id":"d59f08f6.728408","type":"json","z":"12d0fe0b.cc7a42","name":"","pretty":false,"x":110,"y":180,"wires":[["efb6ab46.0dc268"]]},{"id":"a98be178.101","type":"osc","z":"12d0fe0b.cc7a42","name":"OscStop","path":"/audio/0","metadata":false,"x":900,"y":100,"wires":[["1ff85776.8c4229"]]},{"id":"3167c9a2.cee486","type":"osc","z":"12d0fe0b.cc7a42","name":"","path":"","metadata":false,"x":93,"y":595,"wires":[["b7fcff46.23653"]]},{"id":"b7fcff46.23653","type":"json","z":"12d0fe0b.cc7a42","name":"","pretty":false,"x":93,"y":495,"wires":[["b5e8cd78.d1b8e"]]},{"id":"d28deed3.4387c","type":"udp in","z":"12d0fe0b.cc7a42","name":"","iface":"","port":"4001","ipv":"udp4","multicast":"false","group":"192.168.1.3","datatype":"buffer","x":82,"y":664,"wires":[["3167c9a2.cee486"]]},{"id":"d4705830.849da8","type":"udp out","z":"12d0fe0b.cc7a42","name":"","addr":"","iface":"","port":"4000","ipv":"udp4","outport":"","base64":false,"multicast":"false","x":1120,"y":520,"wires":[]},{"id":"abbbe52a.49c708","type":"async","z":"12d0fe0b.cc7a42","name":"Async","async":"\nreturn msg;","outputs":1,"x":570,"y":100,"wires":[["f04bcd22.5584f"]]},{"id":"288cb239.14cb4e","type":"osc","z":"12d0fe0b.cc7a42","name":"OscVolume","path":"/volume/1","metadata":false,"x":890,"y":140,"wires":[["1ff85776.8c4229"]]},{"id":"a474d72f.32c6b8","type":"function","z":"12d0fe0b.cc7a42","name":"Beacon Control","func":"const beaconTracks = [];\nbeaconTracks.push({beacon:'mint_4', track:'5.mp3'});\nbeaconTracks.push({beacon:'mint_2', track:'5.mp3'});\nbeaconTracks.push({beacon:'mint_3', track:'7.mp3'});\nbeaconTracks.push({beacon:'ice_1', track:'6.mp3'});\nbeaconTracks.push({beacon:'ice_2', track:'6.mp3'});\nbeaconTracks.push({beacon:'ice_3', track:'6.mp3'});\nbeaconTracks.push({beacon:'ice_4', track:'6.mp3'});\nbeaconTracks.push({beacon:'blueberry_1', track:'6.mp3'});\nbeaconTracks.push({beacon:'blueberry_2', track:'7.mp3'});\nbeaconTracks.push({beacon:'blueberry_3', track:'7.mp3'});\n\n\n\nconst trackRules = new Map();\ntrackRules.set('5.mp3', '4.mp3');\ntrackRules.set('6.mp3', '5.mp3');\ntrackRules.set('7.mp3', '6.mp3');\n\n\nconst newBeacon = msg.payload.location;\nconst ip = msg.payload.ip;\n\nlet beaconTrack = beaconTracks.find(bt => {\n    if (newBeacon === bt.beacon) {\n        return true;\n    }\n});\n\nlet shouldPlayTrack = beaconTrack ? beaconTrack.track : 'NONE';\nconst curTrack = msg.payload.curTrack;\n\nconst cTrack = trackRules.get(shouldPlayTrack);\nconsole.log('SHOULD ' + shouldPlayTrack + ' CUR ' + curTrack);\nconsole.log ('cTrack' + cTrack);\n\nif (curTrack == cTrack || curTrack == 'NONE') {\n    return { payload: shouldPlayTrack, 'ip': ip };\n}\n// if (shouldPlayTrack === '5.mp3') {\n//     if (curTrack === '4.mp3' || curTrack === 'NONE'){\n//         return { payload: shouldPlayTrack, 'ip': ip };\n//     }\n// }\n\n\n\n\n//return { payload: shouldPlayTrack, 'ip': ip };\n","outputs":"1","noerr":0,"x":460,"y":500,"wires":[["1619cc08.317f34"]]},{"id":"1619cc08.317f34","type":"osc","z":"12d0fe0b.cc7a42","name":"oscPlay","path":"/cloudaudio/1","metadata":false,"x":880,"y":500,"wires":[["d4705830.849da8"]]},{"id":"b5e8cd78.d1b8e","type":"switch","z":"12d0fe0b.cc7a42","name":"beacon/state","property":"topic","propertyType":"msg","rules":[{"t":"eq","v":"/location/1","vt":"str"},{"t":"eq","v":"/devicestate/1","vt":"str"}],"checkall":"true","outputs":2,"x":230,"y":540,"wires":[["a474d72f.32c6b8"],["7095711f.25917"]]},{"id":"7095711f.25917","type":"ui_template","z":"12d0fe0b.cc7a42","group":"6b0aed6b.f7a354","name":"Manual Control ","order":1,"width":"7","height":"12","format":"<style>\ntable, td, th, tr  {\n  border: 0px solid grey;\n  border-collapse: collapse;\n  padding: 1px;\n  font-size: 11px;\n  text-align: left;\n}\n</style>\n \n<table>\n<tbody>\n    <tr>\n    <td colspan=\"2\">\n        <center>\n            <md-button class=\"md-raised\" ng-click=\"send({payload:quitAll()})\" style=\"background-color:red; z-index:1; padding:0px;width:150px\">\n                QuitALL\n            </md-button>\n        </center>\n    </td>\n        <td colspan=\"2\">\n            <center>\n                <md-button ng-click=\"send({payload:stopAll()})\" style=\"background-color:orange; z-index:1; padding:0px;width:150px\">\n                    StopALL\n                </md-button>\n            </center>\n    </td>\n    <td colspan=\"2\"></td>\n<td colspan=\"6\">\n    <center>\n        <md-button class=\"md-raised\" ng-click=\"send({payload:playAll(0)})\" style=\"background-color:green; z-index:1; padding:0px;width:300px\">\n                PlayALL\n        </md-button>\n    </center>\n</td>\n \n</tr>\n    <tr>\n         <th>#</th><th>IP</th><th>UpTime</th><th>State</th><th>Battery</th><th>Beacon</th><th>Track</th><th>Volume</th><th>Progress</th><th>Should</th><th>Play</th><th>Stop</th>\n    </tr>\n    <tr ng-repeat=\"x in table track by $index\">\n        <td>{{$index +1}}</td>\n        <td>{{x.ip}}</td>\n        <td>{{x.deltaSecs}} s</td>\n        <td style=\"{{x.stateStyle}}\">{{x.state}}</td>\n        <td>{{x.battery}}</td>\n        <td>{{x.location}}</td>\n        <td>{{x.track}}</td>\n        <td>{{x.volume}}</td>\n        <td><progress value=\"{{x.progress}}\" max=\"100\"></progress>{{x.trackPlayed}}</td>\n        <td>\n          <select ng-model=\"x.tracks.value\" ng-options=\"y for y in x.tracks.values\" ng-click=\"setTrack(x, y)\">\n          </select>\n        </td>\n        <td>\n          <md-button class=\"md-raised\" ng-click=\"send({payload:play($index)})\" style=\"background-color:green; z-index:1; padding:0px;width:100px\">\n            play\n          </md-button>\n        </td>\n        <td>\n          <md-button ng-click=\"send({payload:stop($index)})\" style=\"background-color:red; z-index:1; padding:0px;width:100px\">\n            stop\n          </md-button>\n        </td>\n    </tr>\n    <tr><td>Volume All</td>\n        <td colspan=\"9\">\n            <md-slider-container>\n                <md-slider md-discrete ng-model=\"vol\" ng-change=\"send({payload:setVolume(vol)})\" step=\"2\" min=\"0\" max=\"100\" class=\"slider-green\">\n                </md-slider>\n                <md-input-container>\n                    <input flex type=\"number\" ng-model=\"vol\" step=\"2\" min=\"0\" max=\"100\" aria-label=\"red\" aria-controls=\"red-slider\" ng-change=\"send({payload:setVolume(vol)})\">\n                </md-input-container>\n            </md-slider-container>\n        </td>\n    </tr>\n</tbody> \n</table>\n \n\n<script>\n    let map1 = new Map();\n\n    allTracks = {\n        \"type\": \"select\",\n        \"value\": \"\",\n        \"values\": [\"1.mp3\", \"2.mp3\", \"3.mp3\", \"4.mp3\", \"5.mp3\", \"6.mp3\", \"7.mp3\", \"8.mp3\", \"9.mp3\", \"10.mp3\", \"11.mp3\"]\n    };\n    (function(scope) {\n        'use strict';\n        scope.vol = 85;\n          \n        scope.setTrack = function (row, track) {\n            const index = row.tracks.values.indexOf(track);\n            if (index === -1) return;\n            const newValue = row.tracks.values[index];\n            row.tracks.value = newValue;\n        };\n        scope.$watch('msg', function (newValue, oldValue, scope) {\n\n            const msg = scope.msg;\n\n            if (msg && msg.payload && msg.ip) {\n                const prevObj = map1.get(msg.ip);\n                const nowSecs = Math.round(Date.now() / 1000);\n                let prevSecs = nowSecs;\n                if (prevObj) {\n                    prevSecs = parseInt(prevObj['prevSecs']);\n                }\n\n                const delta = nowSecs - prevSecs;\n                const minPlayed = Math.floor(msg.payload.trackPlayed / 60);\n                const secPlayed = msg.payload.trackPlayed - minPlayed * 60;\n                const timePlayed = minPlayed + \"m \" + secPlayed + \"s\";\n                const vol = Math.floor(parseFloat(msg.payload.volume) * 100);\n                \n                let stateStyle = 'background-color:white';\n                if ('background' == msg.payload.state) {\n                    stateStyle = 'background-color:yellow';\n                } else if ('shutdown' == msg.payload.state) {\n                    stateStyle = 'background-color:red';\n                }\n                map1.set(msg.ip, {\n                    'ip': msg.ip,\n                    'nowSecs': nowSecs,\n                    'prevSecs': prevSecs,\n                    'deltaSecs': delta,\n                    'state': msg.payload.state,\n                    'stateStyle': stateStyle,\n                    'track': msg.payload.curTrack,\n                    'location': msg.payload.location,\n                    'progress': msg.payload.trackProgress,\n                    'trackPlayed': timePlayed,\n                    'volume': vol +'%',\n                    'battery': msg.payload.batLeft + '% ' + msg.payload.batState,\n                    'tracks': allTracks\n                });\n                \n                map1 = new Map([...map1.entries()].sort((a,b) => {\n                    if (typeof a[0] == \"undefined\") {\n                        return -1;\n                    }\n                    if (typeof b[0] == \"undefined\") {\n                        return 1;\n                    }\n                \tlet aa = a[0].split(\".\");\n                \tlet bb = b[0].split(\".\");\n                \t\n                    let resulta = aa[0]*0x1000000 + aa[1]*0x10000 + aa[2]*0x100 + aa[3]*1;\n                    let resultb = bb[0]*0x1000000 + bb[1]*0x10000 + bb[2]*0x100 + bb[3]*1;\n                \t\n                \treturn resulta-resultb;\n                }));\n                \n                scope.table = Array.from(map1.values());\n            }\n            \n            scope.play = function(idx) {\n                let ips = Array.from(map1.keys());\n                let ip = ips[idx];\n                let row = map1.get(ip);\n                if (row.tracks.value && ip) {\n                    console.log('play track='+ row.tracks.value + ' ip=' + ip);\n                    return {'track' : row.tracks.value, 'ip' : ip};\n                }\n            }\n            \n            scope.playAll = function(idx) {\n                let ips = Array.from(map1.keys());\n                let ip = ips[idx];\n                let row = map1.get(ip);\n                let result = [];\n                if (row.tracks.value && ip) {\n                    ips.forEach(ip => {\n                         if (ip) {\n                             console.log('all track='+ row.tracks.value + ' ip=' + ip);\n                             result.push({'track' : row.tracks.value, 'ip' : ip});\n                         }\n                     });\n                     if (result.length > 0) {\n                         return result;\n                     }\n                }\n            };\n            \n            scope.stop = function(idx) {\n                let ips = Array.from(map1.keys());\n                let ip = ips[idx];\n                console.log('stop ip=' + ip);\n                return{'stop' : true, 'ip' : ip};\n            }\n            \n            scope.stopAll = function(idx) {\n                let ips = Array.from(map1.keys());\n                let result = [];\n                ips.forEach(ip => {\n                     if (ip) {\n                         result.push({'stop' : true, 'ip' : ip});\n                     }\n                 });\n                 if (result.length > 0) {\n                     return result;\n                 }\n            }\n            \n            scope.quitAll = function() {\n                let ips = Array.from(map1.keys());\n                let result = [];\n                ips.forEach(ip => {\n                     if (ip) {\n                         result.push({'quit' : true, 'ip' : ip});\n                     }\n                 });\n                 if (result.length > 0) {\n                     return result;\n                 }\n            }\n            \n            scope.setVolume = function(vol) {\n                let ips = Array.from(map1.keys());\n                let result = [];\n                ips.forEach(ip => {\n                     if (ip) {\n                         result.push({'volume' : parseInt(vol)/100.0, 'ip' : ip});\n                     }\n                 });\n                 if (result.length > 0) {\n                     return result;\n                 }\n            }\n        });\n    })(scope);    \n</script>","storeOutMessages":true,"fwdInMessages":false,"templateScope":"local","x":440,"y":600,"wires":[["c32a8b80.e2a4a8"]]},{"id":"d5fe5acc.d54ff8","type":"osc","z":"12d0fe0b.cc7a42","name":"OscStop","path":"/audio/0","metadata":false,"x":880,"y":540,"wires":[["d4705830.849da8"]]},{"id":"c32a8b80.e2a4a8","type":"async","z":"12d0fe0b.cc7a42","name":"Async","async":"\nreturn msg;","outputs":1,"x":550,"y":540,"wires":[["147b207d.751e6"]]},{"id":"85f9cafc.d3c6a8","type":"osc","z":"12d0fe0b.cc7a42","name":"OscVolume","path":"/volume/1","metadata":false,"x":870,"y":580,"wires":[["d4705830.849da8"]]},{"id":"f04bcd22.5584f","type":"function","z":"12d0fe0b.cc7a42","name":"toOSC","func":"console.log('PAYLOAD' + JSON.stringify(msg));\nif (!msg.payload) return [null, null, null];\nif (Array.isArray(msg.payload)) {\n     console.log('array' +JSON.stringify(msg));\n    msg.payload.forEach(pld => {\n        console.log(\"here\");\n        if (pld.track) {\n            node.send([{payload:pld.track, 'ip': pld.ip}, null]);\n        }\n        \n        if (pld.stop) {\n            node.send([null,{payload:pld.stop, 'ip':pld.ip}]);\n        }\n        if (pld.volume){\n            console.log('each' +JSON.stringify(pld));\n            node.send([null,null, {payload:pld.volume, 'ip': pld.ip}]);\n        }\n        \n        if (pld.quit) {\n            node.send([null,null,null,{payload:pld.stop, 'ip':pld.ip}]);\n        }\n    });\n} else {\n    console.log('   single' +JSON.stringify(msg));\n    if (msg.payload.track) {\n        node.send([{payload:msg.payload.track, 'ip': msg.payload.ip}, null, null]);\n    }\n    \n    if (msg.payload.stop) {\n        node.send([null,{payload:'stop', 'ip': msg.payload.ip}, null]);\n    }\n    \n    if (msg.payload.volume) {\n        node.send([null, null, {payload:msg.payload.volume, 'ip': msg.payload.ip}]);\n    }\n    \n    if (msg.payload.quit) {\n        node.send([null,null, null, {payload:'stop', 'ip': msg.payload.ip}]);\n    }\n}","outputs":"4","noerr":0,"x":708,"y":109,"wires":[["5f260092.e4363"],["a98be178.101"],["288cb239.14cb4e"],["e4579d96.bde25"]]},{"id":"66b0d23e.6d994c","type":"osc","z":"12d0fe0b.cc7a42","name":"","path":"","metadata":false,"x":98,"y":846,"wires":[["655d74f5.ba42dc"]]},{"id":"655d74f5.ba42dc","type":"json","z":"12d0fe0b.cc7a42","name":"","pretty":false,"x":98,"y":746,"wires":[["b638070c.8e3f38"]]},{"id":"71a63cfa.75cdc4","type":"udp in","z":"12d0fe0b.cc7a42","name":"","iface":"","port":"5001","ipv":"udp4","multicast":"false","group":"192.168.1.3","datatype":"buffer","x":87,"y":915,"wires":[["66b0d23e.6d994c"]]},{"id":"24518bb9.8ce294","type":"udp out","z":"12d0fe0b.cc7a42","name":"","addr":"","iface":"","port":"5000","ipv":"udp4","outport":"","base64":false,"multicast":"false","x":1125,"y":771,"wires":[]},{"id":"634df38.045b30c","type":"function","z":"12d0fe0b.cc7a42","name":"Beacon Control","func":"const beaconTracks = [];\nbeaconTracks.push({beacon:'mint_4', track:'5.mp3'});\nbeaconTracks.push({beacon:'mint_2', track:'5.mp3'});\nbeaconTracks.push({beacon:'mint_3', track:'7.mp3'});\nbeaconTracks.push({beacon:'ice_1', track:'6.mp3'});\nbeaconTracks.push({beacon:'ice_2', track:'6.mp3'});\nbeaconTracks.push({beacon:'ice_3', track:'6.mp3'});\nbeaconTracks.push({beacon:'ice_4', track:'6.mp3'});\nbeaconTracks.push({beacon:'blueberry_1', track:'6.mp3'});\nbeaconTracks.push({beacon:'blueberry_2', track:'7.mp3'});\nbeaconTracks.push({beacon:'blueberry_3', track:'7.mp3'});\n\n\n\nconst trackRules = new Map();\ntrackRules.set('5.mp3', '4.mp3');\ntrackRules.set('6.mp3', '5.mp3');\ntrackRules.set('7.mp3', '6.mp3');\n\n\nconst newBeacon = msg.payload.location;\nconst ip = msg.payload.ip;\n\nlet beaconTrack = beaconTracks.find(bt => {\n    if (newBeacon === bt.beacon) {\n        return true;\n    }\n});\n\nlet shouldPlayTrack = beaconTrack ? beaconTrack.track : 'NONE';\nconst curTrack = msg.payload.curTrack;\n\nconst cTrack = trackRules.get(shouldPlayTrack);\nconsole.log('SHOULD ' + shouldPlayTrack + ' CUR ' + curTrack);\nconsole.log ('cTrack' + cTrack);\n\nif (curTrack == cTrack || curTrack == 'NONE') {\n    return { payload: shouldPlayTrack, 'ip': ip };\n}\n// if (shouldPlayTrack === '5.mp3') {\n//     if (curTrack === '4.mp3' || curTrack === 'NONE'){\n//         return { payload: shouldPlayTrack, 'ip': ip };\n//     }\n// }\n\n\n\n\n//return { payload: shouldPlayTrack, 'ip': ip };\n","outputs":"1","noerr":0,"x":465,"y":751,"wires":[["4307e0c1.b809e"]]},{"id":"4307e0c1.b809e","type":"osc","z":"12d0fe0b.cc7a42","name":"oscPlay","path":"/cloudaudio/1","metadata":false,"x":885,"y":751,"wires":[["24518bb9.8ce294"]]},{"id":"b638070c.8e3f38","type":"switch","z":"12d0fe0b.cc7a42","name":"beacon/state","property":"topic","propertyType":"msg","rules":[{"t":"eq","v":"/location/1","vt":"str"},{"t":"eq","v":"/devicestate/1","vt":"str"}],"checkall":"true","outputs":2,"x":235,"y":791,"wires":[["634df38.045b30c"],["4491e9a4.11b648"]]},{"id":"4491e9a4.11b648","type":"ui_template","z":"12d0fe0b.cc7a42","group":"cfa4c2de.5a7f6","name":"Manual Control ","order":1,"width":"7","height":"12","format":"<style>\ntable, td, th, tr  {\n  border: 0px solid grey;\n  border-collapse: collapse;\n  padding: 1px;\n  font-size: 11px;\n  text-align: left;\n}\n</style>\n \n<table>\n<tbody>\n    <tr>\n    <td colspan=\"2\">\n        <center>\n            <md-button class=\"md-raised\" ng-click=\"send({payload:quitAll()})\" style=\"background-color:red; z-index:1; padding:0px;width:150px\">\n                QuitALL\n            </md-button>\n        </center>\n    </td>\n        <td colspan=\"2\">\n            <center>\n                <md-button ng-click=\"send({payload:stopAll()})\" style=\"background-color:orange; z-index:1; padding:0px;width:150px\">\n                    StopALL\n                </md-button>\n            </center>\n    </td>\n    <td colspan=\"2\"></td>\n<td colspan=\"6\">\n    <center>\n        <md-button class=\"md-raised\" ng-click=\"send({payload:playAll(0)})\" style=\"background-color:green; z-index:1; padding:0px;width:300px\">\n                PlayALL\n        </md-button>\n    </center>\n</td>\n \n</tr>\n    <tr>\n         <th>#</th><th>IP</th><th>UpTime</th><th>State</th><th>Battery</th><th>Beacon</th><th>Track</th><th>Volume</th><th>Progress</th><th>Should</th><th>Play</th><th>Stop</th>\n    </tr>\n    <tr ng-repeat=\"x in table track by $index\">\n        <td>{{$index +1}}</td>\n        <td>{{x.ip}}</td>\n        <td>{{x.deltaSecs}} s</td>\n        <td style=\"{{x.stateStyle}}\">{{x.state}}</td>\n        <td>{{x.battery}}</td>\n        <td>{{x.location}}</td>\n        <td>{{x.track}}</td>\n        <td>{{x.volume}}</td>\n        <td><progress value=\"{{x.progress}}\" max=\"100\"></progress>{{x.trackPlayed}}</td>\n        <td>\n          <select ng-model=\"x.tracks.value\" ng-options=\"y for y in x.tracks.values\" ng-click=\"setTrack(x, y)\">\n          </select>\n        </td>\n        <td>\n          <md-button class=\"md-raised\" ng-click=\"send({payload:play($index)})\" style=\"background-color:green; z-index:1; padding:0px;width:100px\">\n            play\n          </md-button>\n        </td>\n        <td>\n          <md-button ng-click=\"send({payload:stop($index)})\" style=\"background-color:red; z-index:1; padding:0px;width:100px\">\n            stop\n          </md-button>\n        </td>\n    </tr>\n    <tr><td>Volume All</td>\n        <td colspan=\"9\">\n            <md-slider-container>\n                <md-slider md-discrete ng-model=\"vol\" ng-change=\"send({payload:setVolume(vol)})\" step=\"2\" min=\"0\" max=\"100\" class=\"slider-green\">\n                </md-slider>\n                <md-input-container>\n                    <input flex type=\"number\" ng-model=\"vol\" step=\"2\" min=\"0\" max=\"100\" aria-label=\"red\" aria-controls=\"red-slider\" ng-change=\"send({payload:setVolume(vol)})\">\n                </md-input-container>\n            </md-slider-container>\n        </td>\n    </tr>\n</tbody> \n</table>\n\n<script>\n    let map2 = new Map();\n\n    allTracks = {\n        \"type\": \"select\",\n        \"value\": \"\",\n        \"values\": [\"1.mp3\", \"2.mp3\", \"3.mp3\", \"4.mp3\", \"5.mp3\", \"6.mp3\", \"7.mp3\", \"8.mp3\", \"9.mp3\", \"10.mp3\", \"11.mp3\"]\n    };\n    (function(scope) {\n        'use strict';\n        scope.vol = 85;\n          \n        scope.setTrack = function (row, track) {\n            const index = row.tracks.values.indexOf(track);\n            if (index === -1) return;\n            const newValue = row.tracks.values[index];\n            row.tracks.value = newValue;\n        };\n        scope.$watch('msg', function (newValue, oldValue, scope) {\n\n            const msg = scope.msg;\n\n            if (msg && msg.payload && msg.ip) {\n                const prevObj = map2.get(msg.ip);\n                const nowSecs = Math.round(Date.now() / 1000);\n                let prevSecs = nowSecs;\n                if (prevObj) {\n                    prevSecs = parseInt(prevObj['prevSecs']);\n                }\n\n                const delta = nowSecs - prevSecs;\n                const minPlayed = Math.floor(msg.payload.trackPlayed / 60);\n                const secPlayed = msg.payload.trackPlayed - minPlayed * 60;\n                const timePlayed = minPlayed + \"m \" + secPlayed + \"s\";\n                const vol = Math.floor(parseFloat(msg.payload.volume) * 100);\n                let stateStyle = 'background-color:white';\n                if ('background' == msg.payload.state) {\n                    stateStyle = 'background-color:yellow';\n                } else if ('shutdown' == msg.payload.state) {\n                    stateStyle = 'background-color:red';\n                }\n                \n                map2.set(msg.ip, {\n                    'ip': msg.ip,\n                    'nowSecs': nowSecs,\n                    'prevSecs': prevSecs,\n                    'deltaSecs': delta,\n                    'state': msg.payload.state,\n                    'stateStyle': stateStyle,\n                    'track': msg.payload.curTrack,\n                    'location': msg.payload.location,\n                    'progress': msg.payload.trackProgress,\n                    'trackPlayed': timePlayed,\n                    'volume': vol +'%',\n                    'battery': msg.payload.batLeft + '% ' + msg.payload.batState,\n                    'tracks': allTracks\n                });\n                \n                map2 = new Map([...map2.entries()].sort((a,b) => {\n                    if (typeof a[0] == \"undefined\") {\n                        return -1;\n                    }\n                    if (typeof b[0] == \"undefined\") {\n                        return 1;\n                    }\n                \tlet aa = a[0].split(\".\");\n                \tlet bb = b[0].split(\".\");\n                \t\n                    let resulta = aa[0]*0x1000000 + aa[1]*0x10000 + aa[2]*0x100 + aa[3]*1;\n                    let resultb = bb[0]*0x1000000 + bb[1]*0x10000 + bb[2]*0x100 + bb[3]*1;\n                \t\n                \treturn resulta-resultb;\n                }));\n                \n                scope.table = Array.from(map2.values());\n            }\n            \n            scope.play = function(idx) {\n                let ips = Array.from(map2.keys());\n                let ip = ips[idx];\n                let row = map2.get(ip);\n                if (row.tracks.value && ip) {\n                    console.log('play track='+ row.tracks.value + ' ip=' + ip);\n                    return {'track' : row.tracks.value, 'ip' : ip};\n                }\n            }\n            \n            scope.playAll = function(idx) {\n                let ips = Array.from(map2.keys());\n                let ip = ips[idx];\n                let row = map2.get(ip);\n                let result = [];\n                if (row.tracks.value && ip) {\n                    ips.forEach(ip => {\n                         if (ip) {\n                             console.log('all track='+ row.tracks.value + ' ip=' + ip);\n                             \n                             result.push({'track' : row.tracks.value, 'ip' : ip});\n                         }\n                     });\n                     if (result.length > 0) {\n                         return result;\n                     }\n                }\n            };\n            \n            scope.stop = function(idx) {\n                let ips = Array.from(map2.keys());\n                let ip = ips[idx];\n                console.log('stop ip=' + ip);\n                return{'stop' : true, 'ip' : ip};\n            }\n            \n            scope.stopAll = function(idx) {\n                let ips = Array.from(map2.keys());\n                let result = [];\n                ips.forEach(ip => {\n                     if (ip) {\n                         result.push({'stop' : true, 'ip' : ip});\n                     }\n                 });\n                 if (result.length > 0) {\n                     return result;\n                 }\n            }\n            \n            scope.quitAll = function() {\n                let ips = Array.from(map2.keys());\n                let result = [];\n                ips.forEach(ip => {\n                     if (ip) {\n                         result.push({'quit' : true, 'ip' : ip});\n                     }\n                 });\n                 if (result.length > 0) {\n                     return result;\n                 }\n            }\n            scope.setVolume = function(vol) {\n                let ips = Array.from(map2.keys());\n                let result = [];\n                ips.forEach(ip => {\n                     if (ip) {\n                         result.push({'volume' : parseInt(vol)/100.0, 'ip' : ip});\n                     }\n                 });\n                 if (result.length > 0) {\n                     return result;\n                 }\n            }\n        });\n    })(scope);    \n</script>","storeOutMessages":true,"fwdInMessages":false,"templateScope":"local","x":445,"y":851,"wires":[["3a3b94b8.f8731c"]]},{"id":"21ea8db2.8ce722","type":"osc","z":"12d0fe0b.cc7a42","name":"OscStop","path":"/audio/0","metadata":false,"x":885,"y":791,"wires":[["24518bb9.8ce294"]]},{"id":"3a3b94b8.f8731c","type":"async","z":"12d0fe0b.cc7a42","name":"Async","async":"\nreturn msg;","outputs":1,"x":555,"y":791,"wires":[["ef44dfcd.3b2da"]]},{"id":"d675db84.467be8","type":"osc","z":"12d0fe0b.cc7a42","name":"OscVolume","path":"/volume/1","metadata":false,"x":875,"y":831,"wires":[["24518bb9.8ce294"]]},{"id":"17d9760c.60dcea","type":"osc","z":"12d0fe0b.cc7a42","name":"","path":"","metadata":false,"x":90,"y":1079,"wires":[["9ef979af.927708"]]},{"id":"9ef979af.927708","type":"json","z":"12d0fe0b.cc7a42","name":"","pretty":false,"x":90,"y":979,"wires":[["edffb7e1.5638e8"]]},{"id":"9ce6604e.4040d","type":"udp in","z":"12d0fe0b.cc7a42","name":"","iface":"","port":"6001","ipv":"udp4","multicast":"false","group":"192.168.1.3","datatype":"buffer","x":79,"y":1148,"wires":[["17d9760c.60dcea"]]},{"id":"cf1c2ce3.cd485","type":"udp out","z":"12d0fe0b.cc7a42","name":"","addr":"","iface":"","port":"6000","ipv":"udp4","outport":"","base64":false,"multicast":"false","x":1117,"y":1004,"wires":[]},{"id":"a5baf4d9.088df8","type":"function","z":"12d0fe0b.cc7a42","name":"Beacon Control","func":"const beaconTracks = [];\nbeaconTracks.push({beacon:'mint_4', track:'5.mp3'});\nbeaconTracks.push({beacon:'mint_2', track:'5.mp3'});\nbeaconTracks.push({beacon:'mint_3', track:'5.mp3'});\nbeaconTracks.push({beacon:'ice_1', track:'6.mp3'});\nbeaconTracks.push({beacon:'ice_2', track:'6.mp3'});\nbeaconTracks.push({beacon:'ice_3', track:'6.mp3'});\nbeaconTracks.push({beacon:'blueberry_1', track:'6.mp3'});\nbeaconTracks.push({beacon:'blueberry_2', track:'7.mp3'});\nbeaconTracks.push({beacon:'blueberry_3', track:'7.mp3'});\n\n\n\nconst trackRules = new Map();\ntrackRules.set('5.mp3', '4.mp3');\ntrackRules.set('6.mp3', '5.mp3');\ntrackRules.set('7.mp3', '6.mp3');\n\n\nconst newBeacon = msg.payload.location;\nconst ip = msg.payload.ip;\n\nlet beaconTrack = beaconTracks.find(bt => {\n    if (newBeacon === bt.beacon) {\n        return true;\n    }\n});\n\nlet shouldPlayTrack = beaconTrack ? beaconTrack.track : 'NONE';\nconst curTrack = msg.payload.curTrack;\n\nconst cTrack = trackRules.get(shouldPlayTrack);\nconsole.log('SHOULD ' + shouldPlayTrack + ' CUR ' + curTrack);\nconsole.log ('cTrack' + cTrack);\n\nif (curTrack == cTrack || curTrack == 'NONE') {\n    return { payload: shouldPlayTrack, 'ip': ip };\n}\n// if (shouldPlayTrack === '5.mp3') {\n//     if (curTrack === '4.mp3' || curTrack === 'NONE'){\n//         return { payload: shouldPlayTrack, 'ip': ip };\n//     }\n// }\n\n\n\n\n//return { payload: shouldPlayTrack, 'ip': ip };\n","outputs":"1","noerr":0,"x":457,"y":984,"wires":[["83b5e0aa.2797d"]]},{"id":"83b5e0aa.2797d","type":"osc","z":"12d0fe0b.cc7a42","name":"oscPlay","path":"/cloudaudio/1","metadata":false,"x":877,"y":984,"wires":[["cf1c2ce3.cd485"]]},{"id":"edffb7e1.5638e8","type":"switch","z":"12d0fe0b.cc7a42","name":"beacon/state","property":"topic","propertyType":"msg","rules":[{"t":"eq","v":"/location/1","vt":"str"},{"t":"eq","v":"/devicestate/1","vt":"str"}],"checkall":"true","outputs":2,"x":227,"y":1024,"wires":[["a5baf4d9.088df8"],["5101a62c.24bdd8"]]},{"id":"5101a62c.24bdd8","type":"ui_template","z":"12d0fe0b.cc7a42","group":"c1d77434.e6a5e8","name":"Manual Control ","order":1,"width":"7","height":"12","format":"<style>\ntable, td, th, tr  {\n  border: 0px solid grey;\n  border-collapse: collapse;\n  padding: 1px;\n  font-size: 11px;\n  text-align: left;\n}\n</style>\n\n<table>\n<tbody>\n    <tr><td colspan=\"6\"><center>\n<md-button ng-click=\"send({payload:stopAll(0)})\" style=\"background-color:red; z-index:1; padding:0px;width:500px\">\n            StopALL\n</md-button>\n</center>\n</td>\n<td colspan=\"6\"><center>\n    <md-button class=\"md-raised\" ng-click=\"send({payload:playAll(0)})\" style=\"background-color:green; z-index:1; padding:0px;width:300px\">\n            PlayALL\n</md-button>\n\n</center>\n</td>\n</tr>\n    <tr>\n         <th>#</th><th>IP</th><th>UpTime</th><th>State</th><th>Battery</th><th>Beacon</th><th>Track</th><th>Volume</th><th>Progress</th><th>Should</th><th>Play</th><th>Stop</th>\n    </tr>\n    <tr ng-repeat=\"x in table track by $index\">\n        <td>{{$index +1}}</td>\n        <td>{{x.ip}}</td>\n        <td>{{x.deltaSecs}} s</td>\n        <td style=\"{{x.state == 'background' ? 'background-color:yellow' : 'background-color:white'}}\">{{x.state}}</td>\n        <td>{{x.battery}}</td>\n        <td>{{x.location}}</td>\n        <td>{{x.track}}</td>\n        <td>{{x.volume}}</td>\n        <td><progress value=\"{{x.progress}}\" max=\"100\"></progress>{{x.trackPlayed}}</td>\n        <td>\n          <select ng-model=\"x.tracks.value\" ng-options=\"y for y in x.tracks.values\" ng-click=\"setTrack(x, y)\">\n          </select>\n        </td>\n        <td>\n          <md-button class=\"md-raised\" ng-click=\"send({payload:play($index)})\" style=\"background-color:green; z-index:1; padding:0px;width:100px\">\n            play\n          </md-button>\n        </td>\n        <td>\n          <md-button ng-click=\"send({payload:stop($index)})\" style=\"background-color:red; z-index:1; padding:0px;width:100px\">\n            stop\n          </md-button>\n        </td>\n    </tr>\n    <tr><td>Volume</td>\n        <td colspan=\"9\">\n            <md-slider-container>\n                <md-slider md-discrete ng-model=\"vol\" ng-change=\"send({payload:setVolume(vol)})\" step=\"2\" min=\"0\" max=\"100\" class=\"slider-green\">\n                </md-slider>\n                <md-input-container>\n                    <input flex type=\"number\" ng-model=\"vol\" aria-label=\"red\" aria-controls=\"red-slider\" ng-change=\"send({payload:setVolume(vol)})\">\n                </md-input-container>\n            </md-slider-container>\n        </td>\n    </tr>\n</tbody> \n</table>\n\n<script>\n    let map3 = new Map();\n\n    allTracks = {\n        \"type\": \"select\",\n        \"value\": \"\",\n        \"values\": [\"1.mp3\", \"2.mp3\", \"3.mp3\", \"4.mp3\", \"5.mp3\", \"6.mp3\", \"7.mp3\", \"8.mp3\", \"9.mp3\", \"10.mp3\", \"11.mp3\", \"FLAT.mp3\", \"CHURCH.mp3\"]\n    };\n    (function(scope) {\n        'use strict';\n        scope.vol = 100;\n          \n        scope.setTrack = function (row, track) {\n            const index = row.tracks.values.indexOf(track);\n            if (index === -1) return;\n            const newValue = row.tracks.values[index];\n            row.tracks.value = newValue;\n        };\n        scope.$watch('msg', function (newValue, oldValue, scope) {\n\n            const msg = scope.msg;\n\n            if (msg && msg.payload && msg.ip) {\n                const prevObj = map3.get(msg.ip);\n                const nowSecs = Math.round(Date.now() / 1000);\n                let prevSecs = nowSecs;\n                if (prevObj) {\n                    prevSecs = parseInt(prevObj['prevSecs']);\n                }\n\n                const delta = nowSecs - prevSecs;\n                const minPlayed = Math.floor(msg.payload.trackPlayed / 60);\n                const secPlayed = msg.payload.trackPlayed - minPlayed * 60;\n                const timePlayed = minPlayed + \"m \" + secPlayed + \"s\";\n                const vol = Math.floor(parseFloat(msg.payload.volume) * 100);\n                map3.set(msg.ip, {\n                    'ip': msg.ip,\n                    'nowSecs': nowSecs,\n                    'prevSecs': prevSecs,\n                    'deltaSecs': delta,\n                    'state': msg.payload.state,\n                    'track': msg.payload.curTrack,\n                    'location': msg.payload.location,\n                    'progress': msg.payload.trackProgress,\n                    'trackPlayed': timePlayed,\n                    'volume': vol +'%',\n                    'battery': msg.payload.batLeft + '% ' + msg.payload.batState,\n                    'tracks': allTracks\n                });\n                \n                map3 = new Map([...map3.entries()].sort((a,b) => {\n                    if (typeof a[0] == \"undefined\") {\n                        return -1;\n                    }\n                    if (typeof b[0] == \"undefined\") {\n                        return 1;\n                    }\n                \tlet aa = a[0].split(\".\");\n                \tlet bb = b[0].split(\".\");\n                \t\n                    let resulta = aa[0]*0x1000000 + aa[1]*0x10000 + aa[2]*0x100 + aa[3]*1;\n                    let resultb = bb[0]*0x1000000 + bb[1]*0x10000 + bb[2]*0x100 + bb[3]*1;\n                \t\n                \treturn resulta-resultb;\n                }));\n                \n                scope.table = Array.from(map3.values());\n            }\n            \n            scope.play = function(idx) {\n                let ips = Array.from(map3.keys());\n                let ip = ips[idx];\n                let row = map3.get(ip);\n                if (row.tracks.value && ip) {\n                    console.log('play track='+ row.tracks.value + ' ip=' + ip);\n                    return {'track' : row.tracks.value, 'ip' : ip};\n                }\n            }\n            \n            scope.playAll = function(idx) {\n                let ips = Array.from(map3.keys());\n                let ip = ips[idx];\n                let row = map3.get(ip);\n                let result = [];\n                if (row.tracks.value && ip) {\n                    ips.forEach(ip => {\n                         if (ip) {\n                             debugger;\n                             console.log('all track='+ row.tracks.value + ' ip=' + ip);\n                             \n                             result.push({'track' : row.tracks.value, 'ip' : ip});\n                         }\n                     });\n                     if (result.length > 0) {\n                         return result;\n                     }\n                }\n            };\n            \n            scope.stop = function(idx) {\n                let ips = Array.from(map3.keys());\n                let ip = ips[idx];\n                console.log('stop ip=' + ip);\n                return{'stop' : true, 'ip' : ip};\n            }\n            \n            scope.stopAll = function(idx) {\n                let ips = Array.from(map3.keys());\n                let result = [];\n                ips.forEach(ip => {\n                     if (ip) {\n                         result.push({'stop' : true, 'ip' : ip});\n                     }\n                 });\n                 if (result.length > 0) {\n                     return result;\n                 }\n            }\n            \n            scope.quitAll = function() {\n                let ips = Array.from(map3.keys());\n                let result = [];\n                ips.forEach(ip => {\n                     if (ip) {\n                         result.push({'quit' : true, 'ip' : ip});\n                     }\n                 });\n                 if (result.length > 0) {\n                     return result;\n                 }\n            }\n            \n            scope.setVolume = function(vol) {\n                let ips = Array.from(map3.keys());\n                let result = [];\n                ips.forEach(ip => {\n                     if (ip) {\n                         result.push({'volume' : parseInt(vol)/100.0, 'ip' : ip});\n                     }\n                 });\n                 if (result.length > 0) {\n                     return result;\n                 }\n            }\n        });\n    })(scope);    \n</script>","storeOutMessages":true,"fwdInMessages":false,"templateScope":"local","x":437,"y":1084,"wires":[["42935d08.09fac4"]]},{"id":"917c4171.cd795","type":"osc","z":"12d0fe0b.cc7a42","name":"OscStop","path":"/audio/0","metadata":false,"x":877,"y":1024,"wires":[["cf1c2ce3.cd485"]]},{"id":"42935d08.09fac4","type":"async","z":"12d0fe0b.cc7a42","name":"Async","async":"\nreturn msg;","outputs":1,"x":547,"y":1024,"wires":[["5d46d245.24026c"]]},{"id":"438330d8.532b2","type":"osc","z":"12d0fe0b.cc7a42","name":"OscVolume","path":"/volume/1","metadata":false,"x":867,"y":1064,"wires":[["cf1c2ce3.cd485"]]},{"id":"e4579d96.bde25","type":"osc","z":"12d0fe0b.cc7a42","name":"OscQuit","path":"/quit/1","metadata":false,"x":906,"y":205,"wires":[["1ff85776.8c4229"]]},{"id":"147b207d.751e6","type":"function","z":"12d0fe0b.cc7a42","name":"toOSC","func":"console.log('PAYLOAD' + JSON.stringify(msg));\nif (!msg.payload) return [null, null, null];\nif (Array.isArray(msg.payload)) {\n     console.log('array' +JSON.stringify(msg));\n    msg.payload.forEach(pld => {\n        console.log(\"here\");\n        if (pld.track) {\n            node.send([{payload:pld.track, 'ip': pld.ip}, null]);\n        }\n        \n        if (pld.stop) {\n            node.send([null,{payload:pld.stop, 'ip':pld.ip}]);\n        }\n        if (pld.volume){\n            console.log('each' +JSON.stringify(pld));\n            node.send([null,null, {payload:pld.volume, 'ip': pld.ip}]);\n        }\n        \n        if (pld.quit) {\n            node.send([null,null,null,{payload:pld.stop, 'ip':pld.ip}]);\n        }\n    });\n} else {\n    console.log('   single' +JSON.stringify(msg));\n    if (msg.payload.track) {\n        node.send([{payload:msg.payload.track, 'ip': msg.payload.ip}, null, null]);\n    }\n    \n    if (msg.payload.stop) {\n        node.send([null,{payload:'stop', 'ip': msg.payload.ip}, null]);\n    }\n    \n    if (msg.payload.volume) {\n        node.send([null, null, {payload:msg.payload.volume, 'ip': msg.payload.ip}]);\n    }\n    \n    if (msg.payload.quit) {\n        node.send([null,null, null, {payload:'stop', 'ip': msg.payload.ip}]);\n    }\n}","outputs":"4","noerr":0,"x":696,"y":546,"wires":[["1619cc08.317f34"],["d5fe5acc.d54ff8"],["85f9cafc.d3c6a8"],["1d94ac5.a7e8d54"]]},{"id":"1d94ac5.a7e8d54","type":"osc","z":"12d0fe0b.cc7a42","name":"OscQuit","path":"/quit/1","metadata":false,"x":869,"y":622,"wires":[["d4705830.849da8"]]},{"id":"6e00807e.ca012","type":"osc","z":"12d0fe0b.cc7a42","name":"OscQuit","path":"/quit/1","metadata":false,"x":885,"y":889,"wires":[["24518bb9.8ce294"]]},{"id":"ef44dfcd.3b2da","type":"function","z":"12d0fe0b.cc7a42","name":"toOSC","func":"console.log('PAYLOAD' + JSON.stringify(msg));\nif (!msg.payload) return [null, null, null];\nif (Array.isArray(msg.payload)) {\n     console.log('array' +JSON.stringify(msg));\n    msg.payload.forEach(pld => {\n        console.log(\"here\");\n        if (pld.track) {\n            node.send([{payload:pld.track, 'ip': pld.ip}, null]);\n        }\n        \n        if (pld.stop) {\n            node.send([null,{payload:pld.stop, 'ip':pld.ip}]);\n        }\n        if (pld.volume){\n            console.log('each' +JSON.stringify(pld));\n            node.send([null,null, {payload:pld.volume, 'ip': pld.ip}]);\n        }\n        \n        if (pld.quit) {\n            node.send([null,null,null,{payload:pld.stop, 'ip':pld.ip}]);\n        }\n    });\n} else {\n    console.log('   single' +JSON.stringify(msg));\n    if (msg.payload.track) {\n        node.send([{payload:msg.payload.track, 'ip': msg.payload.ip}, null, null]);\n    }\n    \n    if (msg.payload.stop) {\n        node.send([null,{payload:'stop', 'ip': msg.payload.ip}, null]);\n    }\n    \n    if (msg.payload.volume) {\n        node.send([null, null, {payload:msg.payload.volume, 'ip': msg.payload.ip}]);\n    }\n    \n    if (msg.payload.quit) {\n        node.send([null,null, null, {payload:'stop', 'ip': msg.payload.ip}]);\n    }\n}","outputs":"4","noerr":0,"x":693,"y":801,"wires":[["4307e0c1.b809e"],["21ea8db2.8ce722"],["d675db84.467be8"],["6e00807e.ca012"]]},{"id":"16110e9.e1b68f1","type":"osc","z":"12d0fe0b.cc7a42","name":"OscQuit","path":"/quit/1","metadata":false,"x":865,"y":1114,"wires":[["cf1c2ce3.cd485"]]},{"id":"5d46d245.24026c","type":"function","z":"12d0fe0b.cc7a42","name":"toOSC","func":"console.log('PAYLOAD' + JSON.stringify(msg));\nif (!msg.payload) return [null, null, null];\nif (Array.isArray(msg.payload)) {\n     console.log('array' +JSON.stringify(msg));\n    msg.payload.forEach(pld => {\n        console.log(\"here\");\n        if (pld.track) {\n            node.send([{payload:pld.track, 'ip': pld.ip}, null]);\n        }\n        \n        if (pld.stop) {\n            node.send([null,{payload:pld.stop, 'ip':pld.ip}]);\n        }\n        if (pld.volume){\n            console.log('each' +JSON.stringify(pld));\n            node.send([null,null, {payload:pld.volume, 'ip': pld.ip}]);\n        }\n        \n        if (pld.quit) {\n            node.send([null,null,null,{payload:pld.stop, 'ip':pld.ip}]);\n        }\n    });\n} else {\n    console.log('   single' +JSON.stringify(msg));\n    if (msg.payload.track) {\n        node.send([{payload:msg.payload.track, 'ip': msg.payload.ip}, null, null]);\n    }\n    \n    if (msg.payload.stop) {\n        node.send([null,{payload:'stop', 'ip': msg.payload.ip}, null]);\n    }\n    \n    if (msg.payload.volume) {\n        node.send([null, null, {payload:msg.payload.volume, 'ip': msg.payload.ip}]);\n    }\n    \n    if (msg.payload.quit) {\n        node.send([null,null, null, {payload:'stop', 'ip': msg.payload.ip}]);\n    }\n}","outputs":"4","noerr":0,"x":666,"y":1102,"wires":[["83b5e0aa.2797d"],["917c4171.cd795"],["438330d8.532b2"],["16110e9.e1b68f1"]]}]