[{"id":"12d0fe0b.cc7a42","type":"tab","label":"MirrorProject UDP","disabled":false,"info":""},{"id":"dec0aae0.212ac8","type":"ui_tab","z":"","name":"Mirror Control","icon":"dashboard"},{"id":"93fcf982.69e248","type":"ui_group","z":"","name":"Group 1","tab":"dec0aae0.212ac8","disp":true,"width":"7"},{"id":"3e359b9b.2d3df4","type":"ui_base","theme":{"name":"theme-light","lightTheme":{"default":"#0094CE","baseColor":"#ce2d0e","baseFont":"-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif","edited":true,"reset":false},"darkTheme":{"default":"#097479","baseColor":"#097479","baseFont":"-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif","edited":true,"reset":false},"customTheme":{"name":"Untitled Theme 1","default":"#4B7930","baseColor":"#4B7930","baseFont":"-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif"},"themeState":{"base-color":{"default":"#0094CE","value":"#0094CE","edited":true},"page-titlebar-backgroundColor":{"value":"#ce2d0e","edited":false},"page-backgroundColor":{"value":"#fafafa","edited":false},"page-sidebar-backgroundColor":{"value":"#000000","edited":false},"group-textColor":{"value":"#f15537","edited":false},"group-borderColor":{"value":"#ffffff","edited":false},"group-backgroundColor":{"value":"#ffffff","edited":false},"widget-textColor":{"value":"#111111","edited":false},"widget-backgroundColor":{"value":"#ce2d0e","edited":false},"widget-borderColor":{"value":"#ffffff","edited":false},"base-font":{"value":"-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif"}}},"site":{"name":"Node-RED Dashboard","hideToolbar":"false","allowSwipe":"false","dateFormat":"DD/MM/YYYY","sizes":{"sx":158,"sy":48,"gx":6,"gy":6,"cx":6,"cy":6,"px":0,"py":0}}},{"id":"133afd58.eba603","type":"ui_group","z":"","name":"Default","tab":"","disp":true,"width":"6"},{"id":"5578c9d6.a33408","type":"ui_group","z":"","name":"Group 2","tab":"dec0aae0.212ac8","order":2,"disp":true,"width":"6"},{"id":"ca242bf6.ea8c38","type":"udp in","z":"12d0fe0b.cc7a42","name":"","iface":"","port":"3001","ipv":"udp4","multicast":"false","group":"192.168.1.3","datatype":"buffer","x":80,"y":360,"wires":[["83597bb2.c99498"]]},{"id":"83597bb2.c99498","type":"osc","z":"12d0fe0b.cc7a42","name":"","path":"","metadata":false,"x":110,"y":280,"wires":[["d59f08f6.728408"]]},{"id":"4d4c62f7.44e0dc","type":"function","z":"12d0fe0b.cc7a42","name":"Decide track","func":"const beaconTracks = [];\nbeaconTracks.push({beacon:'mint_4', track:'5.mp3'});\nbeaconTracks.push({beacon:'mint_2', track:'5.mp3'});\nbeaconTracks.push({beacon:'mint_3', track:'5.mp3'});\nbeaconTracks.push({beacon:'ice_1', track:'6.mp3'});\nbeaconTracks.push({beacon:'ice_2', track:'6.mp3'});\nbeaconTracks.push({beacon:'ice_3', track:'6.mp3'});\nbeaconTracks.push({beacon:'blueberry_1', track:'6.mp3'});\nbeaconTracks.push({beacon:'blueberry_2', track:'7.mp3'});\nbeaconTracks.push({beacon:'blueberry_3', track:'7.mp3'});\n\n\n\nconst trackRules = new Map();\ntrackRules.set('5.mp3', '4.mp3');\ntrackRules.set('6.mp3', '5.mp3');\ntrackRules.set('7.mp3', '6.mp3');\n\n\nconst newBeacon = msg.payload.location;\nconst ip = msg.payload.ip;\n\nlet beaconTrack = beaconTracks.find(bt => {\n    if (newBeacon === bt.beacon) {\n        return true;\n    }\n});\n\nlet shouldPlayTrack = beaconTrack ? beaconTrack.track : 'NONE';\nconst curTrack = msg.payload.curTrack;\n\nconst cTrack = trackRules.get(shouldPlayTrack);\nconsole.log('SHOULD ' + shouldPlayTrack + ' CUR ' + curTrack);\nconsole.log ('cTrack' + cTrack);\n\nif (curTrack == cTrack || curTrack == 'NONE') {\n    return { payload: shouldPlayTrack, 'ip': ip };\n}\n// if (shouldPlayTrack === '5.mp3') {\n//     if (curTrack === '4.mp3' || curTrack === 'NONE'){\n//         return { payload: shouldPlayTrack, 'ip': ip };\n//     }\n// }\n\n\n\n\n//return { payload: shouldPlayTrack, 'ip': ip };\n","outputs":"1","noerr":0,"x":470,"y":240,"wires":[["5f260092.e4363"]]},{"id":"5f260092.e4363","type":"osc","z":"12d0fe0b.cc7a42","name":"oscPlay","path":"/cloudaudio/1","metadata":false,"x":720,"y":200,"wires":[["1ff85776.8c4229"]]},{"id":"1ff85776.8c4229","type":"udp out","z":"12d0fe0b.cc7a42","name":"","addr":"","iface":"","port":"3000","ipv":"udp4","outport":"","base64":false,"multicast":"false","x":992,"y":200,"wires":[]},{"id":"efb6ab46.0dc268","type":"switch","z":"12d0fe0b.cc7a42","name":"state / location","property":"topic","propertyType":"msg","rules":[{"t":"eq","v":"/devicestate/1","vt":"str"},{"t":"eq","v":"/location/1","vt":"str"}],"checkall":"true","outputs":2,"x":260,"y":100,"wires":[["2dd477ad.54fe18"],["4d4c62f7.44e0dc"]]},{"id":"2dd477ad.54fe18","type":"ui_template","z":"12d0fe0b.cc7a42","group":"93fcf982.69e248","name":"Control ","order":1,"width":"7","height":"12","format":"<style>\ntable, td  {\n  border: 1px solid grey;\n  border-collapse: collapse;\n  padding: 1px;\n  font-size: 11px;\n}\n</style>\n\n\n<table>\n<tbody>\n    <tr><td colspan=\"6\"><center>\n<md-button ng-click=\"send({payload:stopAll(0)})\" style=\"background-color:red; z-index:1; padding:0px;width:500px\">\n            StopALL\n</md-button>\n</center>\n</td>\n<td  colspan=\"6\"><center>\n    <md-button class=\"md-raised\" ng-click=\"send({payload:playAll(0)})\" style=\"background-color:green; z-index:1; padding:0px;width:300px\">\n            PlayALL\n</md-button>\n\n</center>\n</td>\n</tr>\n    <tr>\n         <th>#</th><th>IP</th><th>UpTime</th><th>State</th><th>Battery</th><th>Location</th><th>Track</th><th>Volume</th><th>Progress</th><th>Should</th><th>Play</th><th>Stop</th>\n    </tr>\n    <tr ng-repeat=\"x in table track by $index\">\n        <td>{{$index +1}}</td>\n        <td>{{x.ip}}</td>\n        <td>{{x.deltaSecs}} s</td>\n        <td style=\"{{x.state == 'background' ? 'background-color:yellow' : 'background-color:white'}}\">{{x.state}}</td>\n        <td>{{x.battery}}</td>\n        <td>{{x.location}}</td>\n        <td>{{x.track}}</td>\n        <td>{{x.volume}}</td>\n        <td><progress value=\"{{x.progress}}\" max=\"100\"></progress>{{x.trackPlayed}}</td>\n        <td>\n          <select ng-model=\"x.tracks.value\" ng-options=\"y for y in x.tracks.values\" ng-click=\"setTrack(x, y)\">\n          </select>\n        </td>\n        <td>\n          <md-button ng-click=\"send({payload:play($index)})\" style=\"background-color:green; z-index:1; padding:0px;width:100px\">\n            force\n          </md-button>\n        </td>\n        <td>\n          <md-button ng-click=\"send({payload:stop($index)})\" style=\"background-color:red; z-index:1; padding:0px;width:100px\">\n            stop\n          </md-button>\n        </td>\n    </tr>\n</tbody> \n</table>\n\n<script>\n    let map = new Map();\n\n    allTracks = {\n        \"type\": \"select\",\n        \"value\": \"\",\n        \"values\": [\"1.mp3\", \"2.mp3\", \"3.mp3\", \"4.mp3\", \"5.mp3\", \"6.mp3\", \"7.mp3\", \"8.mp3\", \"9.mp3\", \"10.mp3\"]\n        \n    };\n    (function(scope) {\n        'use strict';\n        scope.setTrack = function (row, track) {\n            const index = row.tracks.values.indexOf(track);\n            if (index === -1) return;\n            const newValue = row.tracks.values[index];\n            row.tracks.value = newValue;\n        };\n        scope.$watch('msg', function (newValue, oldValue, scope) {\n            const msg = scope.msg;\n            if (msg && msg.payload && msg.ip) {\n                const prevObj = map.get(msg.ip);\n                const nowSecs = Math.round(Date.now() / 1000);\n                let prevSecs = nowSecs;\n                if (prevObj) {\n                    prevSecs = parseInt(prevObj['prevSecs']);\n                }\n\n                const delta = nowSecs - prevSecs;\n                const minPlayed = Math.floor(msg.payload.trackPlayed / 60);\n                const secPlayed = msg.payload.trackPlayed - minPlayed * 60;\n                const timePlayed = minPlayed + \"m \" + secPlayed + \"s\";\n                const vol = Math.floor(parseFloat(msg.payload.volume) * 100);\n                map.set(msg.ip, {\n                    'ip': msg.ip,\n                    'nowSecs': nowSecs,\n                    'prevSecs': prevSecs,\n                    'deltaSecs': delta,\n                    'state': msg.payload.state,\n                    'track': msg.payload.curTrack,\n                    'location': msg.payload.location,\n                    'progress': msg.payload.trackProgress,\n                    'trackPlayed': timePlayed,\n                    'volume': vol +'%',\n                    'battery': msg.payload.batLeft + '% ' + msg.payload.batState,\n                    'tracks': allTracks\n                });\n                \n                mapSorted = new Map([...map.entries()].sort((a,b) => {\n                    if (typeof a[0] == \"undefined\") {\n                        return -1;\n                    }\n                    if (typeof b[0] == \"undefined\") {\n                        return 1;\n                    }\n                \tlet aa = a[0].split(\".\");\n                \tlet bb = b[0].split(\".\");\n                \t\n                    let resulta = aa[0]*0x1000000 + aa[1]*0x10000 + aa[2]*0x100 + aa[3]*1;\n                    let resultb = bb[0]*0x1000000 + bb[1]*0x10000 + bb[2]*0x100 + bb[3]*1;\n                \t\n                \treturn resulta-resultb;\n                }));\n                \n                scope.table = Array.from(mapSorted.values());\n            }\n            \n            scope.play = function(idx) {\n                let ips = Array.from(map.keys());\n                let ip = ips[idx];\n                let row = map.get(ip);\n                if (row.tracks.value && ip) {\n                    console.log('force track='+ row.tracks.value + ' ip=' + ip);\n                    return {'track' : row.tracks.value, 'ip' : ip};\n                }\n            }\n            \n            scope.playAll = function(idx) {\n                let ips = Array.from(map.keys());\n                let ip = ips[idx];\n                let row = map.get(ip);\n                let result = [];\n                if (row.tracks.value && ip) {\n                    ips.forEach(ip => {\n                         if (ip) {\n                             debugger;\n                             console.log('all track='+ row.tracks.value + ' ip=' + ip);\n                             \n                             result.push({'track' : row.tracks.value, 'ip' : ip});\n                         }\n                     });\n                     if (result.length > 0) {\n                         return result;\n                     }\n                }\n            };\n            \n            scope.stop = function(idx) {\n                let ips = Array.from(map.keys());\n                let ip = ips[idx];\n                console.log('stop ip=' + ip);\n                return{'stop' : true, 'ip' : ip};\n            }\n            \n            scope.stopAll = function(idx) {\n                let ips = Array.from(map.keys());\n                let result = [];\n                ips.forEach(ip => {\n                     if (ip) {\n                         result.push({'stop' : true, 'ip' : ip});\n                     }\n                 });\n                 if (result.length > 0) {\n                     return result;\n                 }\n            }\n        });\n    })(scope);    \n</script>","storeOutMessages":true,"fwdInMessages":false,"templateScope":"local","x":460,"y":60,"wires":[["abbbe52a.49c708"]]},{"id":"d59f08f6.728408","type":"json","z":"12d0fe0b.cc7a42","name":"","pretty":false,"x":110,"y":180,"wires":[["efb6ab46.0dc268"]]},{"id":"14a7a382.99101c","type":"function","z":"12d0fe0b.cc7a42","name":"to OSC","func":"console.log('PAYLOAD' + JSON.stringify(msg));\nif (Array.isArray(msg.payload)) {\n    msg.payload.forEach(pld => {\n        if (pld.track) {\n            node.send([{payload:pld.track, 'ip': pld.ip}, null]);\n        }\n        \n        if (pld.stop) {\n            node.send([null,{payload:pld.stop, 'ip':pld.ip}]);\n        }\n    });\n} else {\n    if (msg.payload.track) {\n        node.send([{payload:msg.payload.track, 'ip': msg.payload.ip}, null]);\n    }\n    \n    if (msg.payload.stop) {\n        node.send([null,{payload:'stop', 'ip': msg.payload.ip}]);\n    }\n}","outputs":"2","noerr":0,"x":632.5,"y":63,"wires":[["5f260092.e4363"],["a98be178.101"]]},{"id":"a98be178.101","type":"osc","z":"12d0fe0b.cc7a42","name":"OscStop","path":"/audio/0","metadata":false,"x":800,"y":60,"wires":[["1ff85776.8c4229"]]},{"id":"3167c9a2.cee486","type":"osc","z":"12d0fe0b.cc7a42","name":"","path":"","metadata":false,"x":93,"y":595,"wires":[["b7fcff46.23653"]]},{"id":"1410f619.04606a","type":"function","z":"12d0fe0b.cc7a42","name":"Decide track","func":"const beaconTracks = [];\nbeaconTracks.push({beacon:'mint_4', track:'5.mp3'});\nbeaconTracks.push({beacon:'mint_2', track:'5.mp3'});\nbeaconTracks.push({beacon:'mint_3', track:'5.mp3'});\nbeaconTracks.push({beacon:'ice_1', track:'6.mp3'});\nbeaconTracks.push({beacon:'ice_2', track:'6.mp3'});\nbeaconTracks.push({beacon:'ice_3', track:'6.mp3'});\nbeaconTracks.push({beacon:'blueberry_1', track:'6.mp3'});\nbeaconTracks.push({beacon:'blueberry_2', track:'7.mp3'});\nbeaconTracks.push({beacon:'blueberry_3', track:'7.mp3'});\nbeaconTracks.push({beacon:'blueberry_4', track:'5.mp3'});\n\n\nconst trackRules = new Map();\ntrackRules.set('5.mp3', '4.mp3');\ntrackRules.set('6.mp3', '5.mp3');\ntrackRules.set('7.mp3', '6.mp3');\n\n\nconst newBeacon = msg.payload.location;\nconst ip = msg.payload.ip;\n\nlet beaconTrack = beaconTracks.find(bt => {\n    if (newBeacon === bt.beacon) {\n        return true;\n    }\n});\n\nlet shouldPlayTrack = beaconTrack ? beaconTrack.track : 'NONE';\nconst curTrack = msg.payload.curTrack;\n\nconst cTrack = trackRules.get(shouldPlayTrack);\nconsole.log('SHOULD ' + shouldPlayTrack + ' CUR ' + curTrack);\nconsole.log ('cTrack' + cTrack);\n\nif (curTrack == cTrack || curTrack == 'NONE') {\n    return { payload: shouldPlayTrack, 'ip': ip };\n}\n// if (shouldPlayTrack === '5.mp3') {\n//     if (curTrack === '4.mp3' || curTrack === 'NONE'){\n//         return { payload: shouldPlayTrack, 'ip': ip };\n//     }\n// }\n\n\n\n\n//return { payload: shouldPlayTrack, 'ip': ip };\n","outputs":"1","noerr":0,"x":453,"y":555,"wires":[["27f16b7b.42ae94"]]},{"id":"27f16b7b.42ae94","type":"osc","z":"12d0fe0b.cc7a42","name":"oscPlay","path":"/cloudaudio/1","metadata":false,"x":703,"y":515,"wires":[["d4705830.849da8"]]},{"id":"f6c34dc9.091f3","type":"switch","z":"12d0fe0b.cc7a42","name":"state / location","property":"topic","propertyType":"msg","rules":[{"t":"eq","v":"/devicestate/1","vt":"str"},{"t":"eq","v":"/location/1","vt":"str"}],"checkall":"true","outputs":2,"x":243,"y":415,"wires":[["7d3cbb4d.9b68d4"],["1410f619.04606a"]]},{"id":"b7fcff46.23653","type":"json","z":"12d0fe0b.cc7a42","name":"","pretty":false,"x":93,"y":495,"wires":[["f6c34dc9.091f3"]]},{"id":"97348226.9480a","type":"function","z":"12d0fe0b.cc7a42","name":"to OSC","func":"console.log('PAYLOAD' + JSON.stringify(msg));\nif (Array.isArray(msg.payload)) {\n    msg.payload.forEach(pld => {\n        if (pld.track) {\n            node.send([{payload:pld.track, 'ip': pld.ip}, null]);\n        }\n        \n        if (pld.stop) {\n            node.send([null,{payload:pld.stop, 'ip':pld.ip}]);\n        }\n    });\n} else {\n    if (msg.payload.track) {\n        node.send([{payload:msg.payload.track, 'ip': msg.payload.ip}, null]);\n    }\n    \n    if (msg.payload.stop) {\n        node.send([null,{payload:'stop', 'ip': msg.payload.ip}]);\n    }\n}","outputs":"2","noerr":0,"x":615.5,"y":378,"wires":[["27f16b7b.42ae94"],["632e5904.670908"]]},{"id":"632e5904.670908","type":"osc","z":"12d0fe0b.cc7a42","name":"OscStop","path":"/audio/0","metadata":false,"x":783,"y":375,"wires":[["d4705830.849da8"]]},{"id":"d28deed3.4387c","type":"udp in","z":"12d0fe0b.cc7a42","name":"","iface":"","port":"4001","ipv":"udp4","multicast":"false","group":"192.168.1.3","datatype":"buffer","x":82,"y":664,"wires":[["3167c9a2.cee486"]]},{"id":"d4705830.849da8","type":"udp out","z":"12d0fe0b.cc7a42","name":"","addr":"","iface":"","port":"4000","ipv":"udp4","outport":"","base64":false,"multicast":"false","x":966,"y":457,"wires":[]},{"id":"abbbe52a.49c708","type":"async","z":"12d0fe0b.cc7a42","name":"","async":"\nreturn msg;","outputs":1,"x":587.5,"y":109,"wires":[["14a7a382.99101c"]]},{"id":"6e14a373.4c1e5c","type":"async","z":"12d0fe0b.cc7a42","name":"","async":"\nreturn msg;","outputs":1,"x":615,"y":308,"wires":[["97348226.9480a"]]},{"id":"7d3cbb4d.9b68d4","type":"ui_template","z":"12d0fe0b.cc7a42","group":"5578c9d6.a33408","name":"Control ","order":1,"width":"7","height":"12","format":"<style>\ntable, td  {\n  border: 1px solid grey;\n  border-collapse: collapse;\n  padding: 1px;\n  font-size: 11px;\n}\n</style>\n\n\n<table>\n<tbody>\n    <tr><td colspan=\"6\"><center>\n<md-button ng-click=\"send({payload:stopAll(0)})\" style=\"background-color:red; z-index:1; padding:0px;width:500px\">\n            StopALL\n</md-button>\n</center>\n</td>\n<td  colspan=\"6\"><center>\n    <md-button class=\"md-raised\" ng-click=\"send({payload:playAll(0)})\" style=\"background-color:green; z-index:1; padding:0px;width:300px\">\n            PlayALL\n</md-button>\n\n</center>\n</td>\n</tr>\n    <tr>\n         <th>#</th><th>IP</th><th>UpTime</th><th>State</th><th>Battery</th><th>Location</th><th>Track</th><th>Volume</th><th>Progress</th><th>Should</th><th>Play</th><th>Stop</th>\n    </tr>\n    <tr ng-repeat=\"x in table track by $index\">\n        <td>{{$index +1}}</td>\n        <td>{{x.ip}}</td>\n        <td>{{x.deltaSecs}} s</td>\n        <td style=\"{{x.state == 'background' ? 'background-color:yellow' : 'background-color:white'}}\">{{x.state}}</td>\n        <td>{{x.battery}}</td>\n        <td>{{x.location}}</td>\n        <td>{{x.track}}</td>\n        <td>{{x.volume}}</td>\n        <td><progress value=\"{{x.progress}}\" max=\"100\"></progress>{{x.trackPlayed}}</td>\n        <td>\n          <select ng-model=\"x.tracks.value\" ng-options=\"y for y in x.tracks.values\" ng-click=\"setTrack(x, y)\">\n          </select>\n        </td>\n        <td>\n          <md-button ng-click=\"send({payload:play($index)})\" style=\"background-color:green; z-index:1; padding:0px;width:100px\">\n            force\n          </md-button>\n        </td>\n        <td>\n          <md-button ng-click=\"send({payload:stop($index)})\" style=\"background-color:red; z-index:1; padding:0px;width:100px\">\n            stop\n          </md-button>\n        </td>\n    </tr>\n</tbody> \n</table>\n\n<script>\n    let map = new Map();\n\n    allTracks = {\n        \"type\": \"select\",\n        \"value\": \"\",\n        \"values\": [\"1.mp3\", \"2.mp3\", \"3.mp3\", \"4.mp3\", \"5.mp3\", \"6.mp3\", \"7.mp3\", \"8.mp3\", \"9.mp3\", \"10.mp3\"]\n        \n    };\n    (function(scope) {\n        'use strict';\n        scope.setTrack = function (row, track) {\n            const index = row.tracks.values.indexOf(track);\n            if (index === -1) return;\n            const newValue = row.tracks.values[index];\n            row.tracks.value = newValue;\n        };\n        scope.$watch('msg', function (newValue, oldValue, scope) {\n            const msg = scope.msg;\n            if (msg && msg.payload && msg.ip) {\n                const prevObj = map.get(msg.ip);\n                const nowSecs = Math.round(Date.now() / 1000);\n                let prevSecs = nowSecs;\n                if (prevObj) {\n                    prevSecs = parseInt(prevObj['prevSecs']);\n                }\n\n                const delta = nowSecs - prevSecs;\n                const minPlayed = Math.floor(msg.payload.trackPlayed / 60);\n                const secPlayed = msg.payload.trackPlayed - minPlayed * 60;\n                const timePlayed = minPlayed + \"m \" + secPlayed + \"s\";\n                const vol = Math.floor(parseFloat(msg.payload.volume) * 100);\n                map.set(msg.ip, {\n                    'ip': msg.ip,\n                    'nowSecs': nowSecs,\n                    'prevSecs': prevSecs,\n                    'deltaSecs': delta,\n                    'state': msg.payload.state,\n                    'track': msg.payload.curTrack,\n                    'location': msg.payload.location,\n                    'progress': msg.payload.trackProgress,\n                    'trackPlayed': timePlayed,\n                    'volume': vol +'%',\n                    'battery': msg.payload.batLeft + '% ' + msg.payload.batState,\n                    'tracks': allTracks\n                });\n                \n                map = new Map([...map.entries()].sort((a,b) => {\n                    if (typeof a[0] == \"undefined\") {\n                        return -1;\n                    }\n                    if (typeof b[0] == \"undefined\") {\n                        return 1;\n                    }\n                \tlet aa = a[0].split(\".\");\n                \tlet bb = b[0].split(\".\");\n                \t\n                    let resulta = aa[0]*0x1000000 + aa[1]*0x10000 + aa[2]*0x100 + aa[3]*1;\n                    let resultb = bb[0]*0x1000000 + bb[1]*0x10000 + bb[2]*0x100 + bb[3]*1;\n                \t\n                \treturn resulta-resultb;\n                }));\n                \n                scope.table = Array.from(map.values());\n            }\n            \n            scope.play = function(idx) {\n                let ips = Array.from(map.keys());\n                let ip = ips[idx];\n                let row = map.get(ip);\n                if (row.tracks.value && ip) {\n                    console.log('force track='+ row.tracks.value + ' ip=' + ip);\n                    return {'track' : row.tracks.value, 'ip' : ip};\n                }\n            }\n            \n            scope.playAll = function(idx) {\n                debugger;\n                let ips = Array.from(map.keys());\n                let ip = ips[idx];\n                let row = map.get(ip);\n                let result = [];\n                if (row.tracks.value && ip) {\n                    ips.forEach(ip => {\n                         if (ip) {\n                             debugger;\n                             console.log('all track='+ row.tracks.value + ' ip=' + ip);\n                             \n                             result.push({'track' : row.tracks.value, 'ip' : ip});\n                         }\n                     });\n                     if (result.length > 0) {\n                         return result;\n                     }\n                }\n            };\n            \n            scope.stop = function(idx) {\n                let ips = Array.from(map.keys());\n                let ip = ips[idx];\n                console.log('stop ip=' + ip);\n                return{'stop' : true, 'ip' : ip};\n            }\n            scope.stopAll = function(idx) {\n                let ips = Array.from(map.keys());\n                let result = [];\n                ips.forEach(ip => {\n                     if (ip) {\n                         result.push({'stop' : true, 'ip' : ip});\n                     }\n                 });\n                 if (result.length > 0) {\n                     return result;\n                 }\n            }\n        });\n    })(scope);    \n</script>","storeOutMessages":true,"fwdInMessages":false,"templateScope":"local","x":396,"y":304,"wires":[["6e14a373.4c1e5c"]]}]